name: API CUDA Tests

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    types: [opened, reopened, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build_image_and_run_api_cuda_tests:
    strategy:
      fail-fast: false
      matrix:
        image:
          [
            { torch_cuda: cu118, torch_pre_release: 0, cuda_version: 11.8.0 },
            { torch_cuda: cu121, torch_pre_release: 1, cuda_version: 12.1.1 },
          ]

    runs-on: nvidia-gpu
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build image
        run: docker build
          --file docker/cuda.dockerfile
          --build-arg USER_ID=$(id -u)
          --build-arg GROUP_ID=$(id -g)
          --build-arg TORCH_CUDA=${{ matrix.image.torch_cuda }}
          --build-arg CUDA_VERSION=${{ matrix.image.cuda_version }}
          --tag opt-bench-cuda:${{ matrix.image.cuda_version }}
          .

      - name: Get GPUs with most free memory
        id: get_devices
        run: |
          echo "::set-output name=devices::$(nvidia-smi --query-gpu=memory.free,index --format=csv,noheader,nounits | sort -n -k1 | tail -n 2 | awk -F', ' '{print $2}' | xargs echo -n | sed 's/ /,/g' | awk '{print $0}')"

      - name: Run tests
        run: docker run
          --rm
          --pid host
          --shm-size 64G
          --env USE_CUDA="1"
          --gpus '"device=${{ steps.get_devices.outputs.devices }}"'
          --volume $(pwd):/workspace/optimum-benchmark
          --workdir /workspace/optimum-benchmark
          --entrypoint /bin/bash
          opt-bench-cuda:${{ matrix.image.cuda_version }}
          -c "pip install -e .[testing,timm,diffusers] && pytest -k 'api and cuda' -x"
