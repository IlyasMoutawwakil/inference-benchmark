hydra:
  run:
    dir: experiments/${oc.env:HOSTNAME}/${model}/${experiment_name}
  sweep:
    dir: experiments/${oc.env:HOSTNAME}/${model}/${experiment_name}
    subdir: ${benchmark.input_shapes.batch_size}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params:
      benchmark.input_shapes.batch_size: 1,2,4,8,16,32,64,128
      model: NousResearch/Llama-2-7b-hf,NousResearch/Llama-2-13b-hf
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      colorlog:
        (): colorlog.ColoredFormatter
        format: '[%(cyan)s%(asctime)s%(reset)s][%(purple)sHYDRA%(reset)s] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: colorlog
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
      colorlog:
        (): colorlog.ColoredFormatter
        format: '[%(cyan)s%(asctime)s%(reset)s][%(blue)s%(name)s%(reset)s][%(log_color)s%(levelname)s%(reset)s]
          - %(message)s'
        log_colors:
          DEBUG: purple
          INFO: green
          WARNING: yellow
          ERROR: red
          CRITICAL: red
    handlers:
      console:
        class: logging.StreamHandler
        formatter: colorlog
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task: []
  job:
    name: cli
    chdir: true
    override_dirname: ''
    id: ???
    num: ???
    config_name: fp16
    env_set:
      CUDA_VISIBLE_DEVICES: '0'
      CUDA_DEVICE_ORDER: PCI_BUS_ID
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /workspace/optimum-benchmark/examples/running-llamas
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: optimum_benchmark
      schema: pkg
      provider: main
    - path: hydra_plugins.hydra_colorlog.conf
      schema: pkg
      provider: hydra-colorlog
    - path: /workspace/optimum-benchmark/examples/running-llamas/configs
      schema: file
      provider: command-line
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      benchmark: inference
      launcher: process
      backend: pytorch
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: colorlog
      hydra/hydra_logging: colorlog
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
backend:
  name: pytorch
  version: ${pytorch_version:}
  _target_: optimum_benchmark.backends.pytorch.backend.PyTorchBackend
  seed: 42
  inter_op_num_threads: null
  intra_op_num_threads: null
  continuous_isolation: true
  isolation_check_interval: null
  delete_cache: false
  no_weights: true
  device_map: null
  torch_dtype: float16
  eval_mode: ${is_inference:${benchmark.name}}
  disable_grad: ${is_inference:${benchmark.name}}
  amp_autocast: false
  amp_dtype: null
  torch_compile: false
  torch_compile_config: {}
  to_bettertransformer: false
  use_flash_attention_2: false
  quantization_scheme: null
  quantization_config: {}
  data_parallel: false
  deepspeed_inference: false
  deepspeed_inference_config: {}
  peft_strategy: null
  peft_config: {}
launcher:
  name: process
  _target_: optimum_benchmark.launchers.process.launcher.ProcessLauncher
  start_method: spawn
benchmark:
  name: inference
  _target_: optimum_benchmark.benchmarks.inference.benchmark.InferenceBenchmark
  duration: 10
  warmup_runs: 10
  memory: true
  energy: false
  input_shapes:
    batch_size: null
    sequence_length: 256
    num_choices: 1
    feature_size: 80
    nb_max_frames: 3000
    audio_sequence_length: 16000
  new_tokens: 512
  can_diffuse: ${can_diffuse:${task}}
  can_generate: ${can_generate:${task}}
  forward_kwargs: {}
  generate_kwargs: {}
experiment_name: fp16
model: llama-2
task: ${infer_task:${model}}
device: cuda
hub_kwargs:
  revision: main
  cache_dir: null
  force_download: false
  local_files_only: false
environment:
  optimum_version: 1.14.1
  optimum_commit: null
  transformers_version: 4.35.2
  transformers_commit: null
  accelerate_version: 0.24.1
  accelerate_commit: null
  diffusers_version: null
  diffusers_commit: null
  python_version: 3.10.12
  system: Linux
  cpu: ' AMD EPYC 7742 64-Core Processor'
  cpu_count: 128
  cpu_ram_mb: 540671
  gpus:
  - NVIDIA A100-SXM4-80GB
